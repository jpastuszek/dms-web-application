#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.
#
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'ip'
require 'cuba'
require "cuba/render"
require 'dms-web-application'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Daemon.new('DMS Web Application', VERSION) do
	cli do
		internal_console_connection
		hello_wait

		option :mongrel_recv_address,
			short: :m,
			default: 'tcp://127.0.0.1:12300',
			description: "Mongrel2 SUB socket address (recv_spec)"
		option :mongrel_send_address,
			short: :M,
			default: 'tcp://127.0.0.1:12301',
			description: "Mongrel2 PUSH socket address (send_spec)"
	end

	main do |settings|
		Cuba.use Rack::CoreLogger
		Cuba.use Rack::RootScriptName
		Cuba.use Rack::ErrorHandling
		Cuba.use Rack::UnhandledRequest

		Cuba.settings[:template_engine] = 'haml'
		Cuba.settings[:views] = File.join(File.dirname(__FILE__), '..', 'views')
		Cuba.plugin Cuba::Render
		Cuba.plugin Streaming
		Cuba.plugin ConsoleBus

		Cuba.settings[:program_id] = settings.program_id
		Cuba.plugin RequestID

		Cuba.settings[:pages] = [
			'dashboard',
			'query'
		]
		Cuba.plugin View
		Cuba.plugin Navigation
		Cuba.plugin ErrorMatcher
		Cuba.plugin EmptyParamMatcher
		Cuba.plugin OptionalParamMatcher

		Cuba.define do
			logging_class_name settings.program_class_name

			on error BusDetector::NoBusError do
				res.status = 504
				send_page 'no_bus_error'
			end

			on error Rack::UnhandledRequest::UnhandledRequestError do
				res.status = 404
				send_page '404'
			end

			on error StandardError do
				log.error "Unhandled error: ", env["ERROR"]
				res.status = 500
				send_page '500', :error_class => env["ERROR"].class, :error_message => env["ERROR"].message
			end

			on get do
				on root do
					go_to 'dashboard'
				end

				on 'dashboard' do
					send_page 'dashboard'
				end

				on 'query' do
					# handle form submit
					on 'submit', param!('tag_set') do |tag_set|
						go_to 'query', tag_set
					end

					tag_sets = Rack::Utils.unescape(env['PATH_INFO']).split('/').tap{|t| t.shift}
					if tag_sets.empty?
						send_page 'query'
					else
						log.info "quering for tag sets: #{tag_sets}"
						send_page 'query', tag_sets: tag_sets
					end
				end

				on 'feed/query/:tag_set', param?(:time_out, 10), param?(:time_from, Time.now.to_s), param?(:time_span, 60*60), param?(:granularity, 10) do |tag_set, time_out, time_from, time_span, granularity|
					time_from = Time.parse(time_from + ' UTC')

					tag_set = TagSet.new(tag_set)
					log.debug "feed for query: #{tag_set} (time out: #{time_out})"

					query = DataSetQuery.new(tag_set, time_from, time_span.to_f, granularity.to_f)
					log.debug "sending query: #{query}"
					bus.send query, topic: request_id

					res['Content-Type'] = 'text/event-stream'
					res['Cache-Control'] = 'no-cache'
					res['Connection'] = 'keep-alive'
					res['Access-Control-Allow-Origin'] = '*'

					res.stream do
						res.write ":#{' padding '.ljust(2049, '-')}\n" # padding

						bus.on DataSet, request_id do |data_set|
							log.info "got DataSet: #{data_set}"
							data_set.to_json.each_line do |json_line|
								res.write "DataSet: #{json_line}\n"
							end
							res.write "\n"
						end

						poller.after(time_out.to_i) do
							#bus.deregister_on DataSet, request_id
							res.close
						end
					end
				end

				# serve bootstrap files
				on 'bootstrap' do
					run Rack::File.new(Pathname.new('views') + 'bootstrap')
				end
			end
		end

		main_loop do
			ZeroMQService.socket(:bus) do |zmq|
				log.debug "internal console subscriber: #{settings.internal_console_subscriber}, publisher: #{settings.internal_console_publisher}"
				zmq.bus_connect(settings.internal_console_publisher, settings.internal_console_subscriber, {hwm: 10, linger: 0})
			end

			Rack::Handler::DMSMongrel2.run Cuba, recv_address: settings.mongrel_recv_address, send_address: settings.mongrel_send_address
		end
	end
end

