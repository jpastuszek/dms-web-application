#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.
#
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'ip'
require 'cuba'
require 'sprockets'

require 'dms-web-application/rack/handler'

require 'dms-web-application/app_root'

require 'dms-web-application/error_reporter'
require 'dms-web-application/dashboard'
require 'dms-web-application/query'
require 'dms-web-application/feed'
require 'dms-web-application/server_time'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Daemon.new('DMS Web Application', VERSION) do
	cli do
		internal_console_connection
		hello_wait

		option :mongrel_recv_address,
			short: :m,
			default: 'tcp://127.0.0.1:12300',
			description: "Mongrel2 SUB socket address (recv_spec)"
		option :mongrel_send_address,
			short: :M,
			default: 'tcp://127.0.0.1:12301',
			description: "Mongrel2 PUSH socket address (send_spec)"
	end

	main do |settings|
		Cuba.plugin AppRoot

		require 'dms-web-application/rack/error_handling'
		require 'dms-web-application/rack/unhandled_request'

		Cuba.use Rack::ErrorHandling
		Cuba.use Rack::UnhandledRequest

		require 'dms-web-application/helpers/error_matcher'
		require 'dms-web-application/helpers/navigation'

		Cuba.plugin ErrorMatcher
		Cuba.plugin Navigation

		Cuba.define do
			on error? do
				run ErrorReporter
			end

			on get do
				on root do
					go_to 'dashboard'
				end

				on 'assets' do
					sprockets = Sprockets::Environment.new
					sprockets.append_path 'assets'
					run sprockets
				end

				on 'dashboard' do
					run Dashboard
				end

				on 'query' do
					run Query	
				end

				on 'feed' do
					Feed.settings[:program_id] = settings.program_id
					run Feed
				end

				on 'server_time' do
					run ServerTime
				end
			end
		end

		main_loop do
			ZeroMQService.socket(:bus) do |zmq|
				log.debug "internal console subscriber: #{settings.internal_console_subscriber}, publisher: #{settings.internal_console_publisher}"
				zmq.bus_connect(settings.internal_console_publisher, settings.internal_console_subscriber, {hwm: 10, linger: 0})
			end

			Rack::Handler::DMSMongrel2.run Cuba, recv_address: settings.mongrel_recv_address, send_address: settings.mongrel_send_address
		end
	end
end

