#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.
#
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'ip'
require 'cuba'
require 'dms-web-application'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Daemon.new('DMS Web Application', VERSION) do
	cli do
		internal_console_connection
		hello_wait

		option :mongrel_recv_address,
			short: :m,
			default: 'tcp://127.0.0.1:12300',
			description: "Mongrel2 SUB socket address (recv_spec)"
		option :mongrel_send_address,
			short: :M,
			default: 'tcp://127.0.0.1:12301',
			description: "Mongrel2 PUSH socket address (send_spec)"
	end

	main do |settings|
		Cuba.use CoreLogger
		Cuba.plugin Streaming
		Cuba.plugin ConsoleBus

		Cuba.define do
			logging_class_name settings.program_class_name

			on root do
				log.info 'hello'
				res.write "hello\n"
			end

			on 'stream' do
				stream do |res|
					200.times do |time|
						res.write time
						sleep 0.1
					end
				end
			end

			on 'error' do
				raise BusDetector::NoBusError
			end

			on 'query/:tag_set' do |tag_set|
				tag_set = TagSet.new(tag_set)
				log.debug "wiating #{settings.hello_wait} seconds for Hello message..."
				bus.ready!(settings.program_id, settings.hello_wait, poller)

				stream do |out|
					bus.on DataSet, settings.program_id do |data_set|
						log.info "#{data_set}"
						out << data_set
					end

					query = DataSetQuery.new(tag_set, Time.now.utc, 60*60, 1)
					bus.send query, topic: settings.program_id

					poller.poll! 10
				end
			end
		end

		Cuba.use ErrorHandling do
			on error BusDetector::NoBusError do
				res.status = 408
				res.write 'BusDetector::NoBusError - no discovery response received'
			end
		end

		main_loop do
			ZeroMQService.socket(:bus) do |zmq|
				log.debug "internal console subscriber: #{settings.internal_console_subscriber}, publisher: #{settings.internal_console_publisher}"
				zmq.bus_connect(settings.internal_console_publisher, settings.internal_console_subscriber, {hwm: 10, linger: 0})
			end

			Rack::Handler::Mongrel2BuiltIn.run Cuba, recv_address: settings.mongrel_recv_address, send_address: settings.mongrel_send_address
		end
	end
end

