#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.
#
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'ip'
require 'sinatra/base'
require 'dms-web-application'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Daemon.new('DMS Console Connector', VERSION) do
	cli do
		description 'DMS Web UI Application'

		internal_console_connection
		hello_wait

		switch :no_bind, 
			description: "Do not bind to TCP socket - useful with -s fastcgi option"
		option :bind, 
			short: :b,
			default: IP.new('127.0.0.1'),
			cast: IP,
			description: "HTTP server bind address - use 0.0.0.0 to bind to all interfaces"
		option :port,
			short: :p,
			default: 3100,
			cast: Integer,
			description: "HTTP server TCP port"
		option :server,
			short: :s,
			default: 'Mongrel2BuiltIn',
			description: "Rack server handler like thin, mongrel, webrick, fastcgi etc."
		option :mongrel_recv_address,
			short: :m,
			default: 'tcp://127.0.0.1:12300',
			description: "Mongrel2 SUB socket address (recv_spec)"
		option :mongrel_send_address,
			short: :M,
			default: 'tcp://127.0.0.1:12301',
			description: "Mongrel2 PUSH socket address (send_spec)"
	end

	main do |settings|
		sinatra = Sinatra.new

		unless settings.no_bind
			sinatra.set :port, settings.port
			sinatra.set :bind, settings.bind.to_s
		else
			sinatra.set :port, nil
			sinatra.set :bind, nil
		end

		sinatra.set :environment, 'production'
		sinatra.set :server, settings.server
		sinatra.set :lock, true
		sinatra.set :logging, true

		sinatra.before do
			# use core logger
			logging_class_name settings.program_class_name
			env['rack.logger'] = log
		end

		sinatra.get '/' do
			log.info 'hello1'
			logger.info 'hello2'
			'hello'
		end

		sinatra.get '/query/*' do |tag_set|
			tag_set = TagSet.new(tag_set)
			#log.debug "wiating #{settings.hello_wait} seconds for Hello message..."
			#sinatra.bus.ready!(settings.program_id, settings.hello_wait)

			# non blocking stream
			#stream(:keep_open) do |out|
				#EventMachine::PeriodicTimer.new(1) { out << "#{Time.now}\n" }
				#EventMachine::PeriodicTimer.new(3) { out.close }
			#end

			# blocking stream
			stream do |out|
				30.times { out << "#{Time.now}\n"; sleep 0.2 }
			end
		end

		sinatra.error BusDetector::NoBusError do
			halt 408, 'BusDetector::NoBusError - no discovery response received'
		end

		main_loop do
			#ZeroMQ.new do |zmq|
				#poller = ZeroMQ::Poller.new
				#log.debug "internal console subscriber: #{settings.internal_console_subscriber}, publisher: #{settings.internal_console_publisher}"
				#zmq.bus_connect(settings.internal_console_publisher, settings.internal_console_subscriber, {hwm: 10, linger: 0}) do |bus|
					#sinatra.set :bus, bus
					#sinatra.set :poller, poller

					ENV['RACK_MONGREL2_RECV'] = settings.mongrel_recv_address
					ENV['RACK_MONGREL2_SEND'] = settings.mongrel_send_address
					ENV['RACK_MONGREL2_UUID'] = settings.program_id
					sinatra.run!
				#end
			#end
		end
	end
end

