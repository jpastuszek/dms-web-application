#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'pathname'
require 'dms-core'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Daemon.new('DMS Console Connector', VERSION) do
	cli do
		description "DMS console messaging hub"

		option :external_sub_bind_address,
			short: :c, 
			description: 'ZeroMQ bind adderss for data-processor connections - subscriber', 
			default: 'tcp://127.0.0.1:12000'
		option :external_pub_bind_address,
			short: :C, 
			description: 'ZeroMQ bind adderss for data-processor connections - publisher', 
			default: 'tcp://127.0.0.1:12001'
		option :internal_sub_bind_address,
			short: :i, 
			description: 'ZeroMQ bind adderss for internal console components connections - subscriber', 
			default: 'ipc:///tmp/dms-console-connector-sub'
		option :internal_pub_bind_address,
			short: :I, 
			description: 'ZeroMQ bind adderss for internal console components connections - publisher', 
			default: 'ipc:///tmp/dms-console-connector-pub'
		option :delay,
			short: :D,
			description: 'deleay stub message sending by given no of seconds', 
			cast: Float,
			default: 0.2

		option :test_set,
			short: :t,
			description: 'data test set', 
			default: 'web'

		linger_time
	end

	main do |settings|
		ZeroMQ.new do |zmq|
			poller = ZeroMQ::Poller.new
			log.debug "listening on internal console subscriber: #{settings.internal_sub_bind_address}, publisher: #{settings.internal_pub_bind_address}"
			zmq.bus_bind(settings.internal_pub_bind_address, settings.internal_sub_bind_address, {linger: settings.linger_time}) do |internal_bus|

				internal_bus.on DataSetQuery do |message, topic|
					log.debug "#{message}, #{topic}"

					data_points = (message.time_span / message.granularity).to_i
					time_step = message.granularity

					case settings.test_set
					when 'web'
						8.times do
							ds = DataSet.new('memory', 'location:magi, system:memory', message.time_from, message.time_span) do
								total = (rand > 0.5 ? rand(0..1000000000000.0) : 1.0 / 10**rand(1..10) * rand(1..1000.0))

								data_points.times do |point_no|
									used = rand(total*0.25..total*0.75)
									time = message.time_from.to_f - (point_no * time_step)
									component_data 'used', time, used
									component_data 'free', time, total - used
								end
							end
							p ds
							internal_bus.send ds, topic: topic
							sleep settings.delay
						end
					when 'static'
						2.times do
							ds = DataSet.new('memory', 'location:magi, system:memory', message.time_from, message.time_span) do
								data_points.times do |point_no|
									time = message.time_from.to_f - (point_no * time_step)
									component_data 'used', time, 3
									component_data 'free', time, 2
								end
							end
							p ds
							internal_bus.send ds, topic: topic
						end
					else
						fail "test set #{settings.test_set} not supported"
					end
				end

				poller << internal_bus

				main_loop do
					poller.poll!
				end
			end
		end
	end
end


